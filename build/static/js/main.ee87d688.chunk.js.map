{"version":3,"sources":["components/Navbar.js","covidUpdate/CovidUpdate.js","components/Footer.js","SocialMedia/SocialMedia.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","CovidUpdate","Footer","SocialMedia","icon","faFacebook","size","faTwitter","faInstagram","faGithub","App","props","state","news","fetch","then","response","json","myJson","setState","this","map","item","index","title","src","img","alt","link","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+QAgBeA,MAZf,WAEI,OACO,6BACQ,wBAAIC,UAAW,UACb,4BAAI,uBAAGA,UAAW,QAAQC,KAAM,MAA5B,uBACH,4BAAI,uBAAGD,UAAW,QAAQC,KAAM,iCAA5B,0BCEXC,MATf,WAEI,OACI,6BACI,wBAAIF,UAAY,aAAhB,gBCQGG,MAZf,WAEI,OACI,gCACI,6BACI,wBAAIH,UAAY,aAAhB,4D,cCoBDI,MAxBf,WAEI,OACI,yBAAKJ,UAAW,eACZ,yCACJ,yBAAKA,UAAY,UACb,uBAAGC,KAAO,0CAA0CD,UAAY,YAC5D,kBAAC,IAAD,CAAiBK,KAAQC,IAAYC,KAAO,QAEhD,uBAAGN,KAAO,oCAAoCD,UAAY,WACtD,kBAAC,IAAD,CAAiBK,KAAQG,IAAWD,KAAO,QAE/C,uBAAGN,KAAO,sCAAsCD,UAAY,aACxD,kBAAC,IAAD,CAAiBK,KAAQI,IAAaF,KAAO,QAGjD,uBAAGN,KAAO,8BAA8BD,UAAY,UAChD,kBAAC,IAAD,CAAiBK,KAAQK,IAAUH,KAAO,WC+B3CI,E,kDA5Cb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,KAAO,IAHO,E,gEAOf,IAAD,OACEC,MAAM,+CACNC,MAAK,SAACC,GACR,OAAOA,EAASC,UAEdF,MAAK,SAACG,GACL,EAAKC,SAAS,CACZN,KAAOK,EAAOL,Y,+BAMnB,OACA,yBAAKd,UAAW,OACf,kBAAC,EAAD,MACA,kBAAC,EAAD,MACC,6BACEqB,KAAKR,MAAMC,KAAKQ,KAAI,SAACC,EAAKC,GAC1B,OACC,yBAAKxB,UAAY,UAChB,wBAAIA,UAAY,WAAhB,IAA4BuB,EAAKE,MAAjC,MADD,IACgD,6BAC/C,yBAAMzB,UAAW,QAAQ0B,IAAOH,EAAKI,IAAKC,IAAI,SAC7C,uBAAG5B,UAAY,SACdC,KAAOsB,EAAKM,MACV,+CAAqB,KAArB,MAEF,6BAPH,IAOa,6BAPb,IAOuB,kCAIzB,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAxCWC,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ee87d688.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../App.css';\r\nimport { Link, Router } from 'react-router-dom';\r\n\r\nfunction Navbar(){\r\n\r\n    return(\r\n           <nav>\r\n                   <ul className= \"navsub\">\r\n                     <li><a className =\"india\" href= \"/#\">Covid-News-Updates</a></li>\r\n                      <li><a className =\"india\" href= \"https://www.covid19india.org/\">Indian-Covid-Cases</a></li>\r\n                   </ul>\r\n           </nav>\r\n\r\n    );\r\n}\r\nexport default Navbar;","import React from 'react';\r\nimport '../App.css'\r\n\r\nfunction CovidUpdate()\r\n{\r\n    return(\r\n        <div>\r\n            <h1 className = \"headercov\"> CovidNews</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CovidUpdate;","import React from 'react';\r\nimport '../App.css'\r\n\r\nfunction Footer()\r\n{\r\n    return(\r\n        <footer>\r\n            <div>\r\n                <h4 className = \"footstyle\">Copyright Â© 2020 Raja Karnam, All Rights Reserved.</h4>\r\n              \r\n            </div>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport '../App.css';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faFacebook,faTwitter,faInstagram,faGithub} from '@fortawesome/free-brands-svg-icons'\r\nfunction SocialMedia(){\r\n\r\n    return(\r\n        <div className= \"socialmedia\">\r\n            <h3>Follow me</h3>\r\n        <div className = \"social\">\r\n            <a href = \"https://www.facebook.com/raja.karnam.10\" className = \"facebook\">\r\n                <FontAwesomeIcon icon = {faFacebook} size = \"2x\" />\r\n            </a>\r\n            <a href = \"https://www.twitter.com/imrkarnam\" className = \"twitter\">\r\n                <FontAwesomeIcon icon = {faTwitter} size = \"2x\" />\r\n            </a>\r\n            <a href = \"https://www.instagram.com/imrkarnam\" className = \"instagram\">\r\n                <FontAwesomeIcon icon = {faInstagram} size = \"2x\" />\r\n            </a>\r\n\r\n            <a href = \"https://github.com/Raja9999\" className = \"github\">\r\n                <FontAwesomeIcon icon = {faGithub} size = \"2x\" />\r\n            </a>\r\n        </div>\r\n            </div>\r\n        \r\n    );\r\n}\r\nexport default SocialMedia;","import React,{Component} from 'react';\nimport './App.css';\nimport ReactDOM from 'react-dom'; \nimport Navbar from './components/Navbar';\nimport CovidUpdate from './covidUpdate/CovidUpdate';\nimport Footer from './components/Footer';\nimport SocialMedia from './SocialMedia/SocialMedia';\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      news : []\n    }\n  }\n    componentDidMount()\n    {\n      fetch('https://cryptic-ravine-96718.herokuapp.com/')\n     .then((response) => {\n    return response.json();\n      })\n     .then((myJson) => {\n       this.setState({\n         news : myJson.news\n       })\n    });\n    }\n  render(){\n\n    return(\n    <div className= \"App\">\n     <Navbar />\n     <CovidUpdate />\n      <div > \n       {this.state.news.map((item,index) => {\n        return (\n         <div className = \"update\"> \n          <h1 className = \"heading\"> {item.title}  </h1> <br></br>\n          <img  className= \"image\" src = {item.img} alt=\"logo\" />\n           <a className = \"matter\"\n            href= {item.link}>\n              <h4>Wanna read more {\"\\n\"} </h4>\n            </a>\n            <br></br> <br></br> <br></br>\n         </div>\n       )})}\n      </div>\n       <Footer /> \n       <SocialMedia />\n    </div>\n    )\n  }\n};\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}